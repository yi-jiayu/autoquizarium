#!/usr/bin/env python3

import argparse
import logging
import toml
import sentry_sdk
from state_machine import StateMachine
from telethon import TelegramClient, events
from test_bank import TestBank

logging.basicConfig(level=logging.INFO)

QUIZARIUM_USER_ID = 155670507

parser = argparse.ArgumentParser(description='Start Quizarium daemon')
parser.add_argument('-c', '--config-file', default='quizariumd.toml', type=argparse.FileType('r'),
                    help='Config file path (default: %(default)s)', metavar='FILE')
args = parser.parse_args()

config = toml.load(args.config_file)

if 'sentry_dsn' in config:
    from subprocess import check_output

    release = None
    try:
        output = check_output(['git', 'describe', '--always'], text=True)
        if output:
            release = output.strip()
    except:
        pass

    sentry_sdk.init(config['sentry_dsn'], release=release)

telegram_config = config['telegram']
session = telegram_config['session_file'] or telegram_config['username']
api_id = telegram_config['api_id']
api_hash = telegram_config['api_hash']
phone = telegram_config['phone']
password = telegram_config['password']

client = TelegramClient(session, api_id, api_hash, sequential_updates=True)

current_question_and_search_results = {}
answer_attempts = {}

chats = None
blacklist_chats = False
chat_config = config['chats']
if chat_config:
    include_chats = chat_config['include']
    exclude_chats = chat_config['exclude']
    if include_chats and not exclude_chats:
        chats = include_chats
    elif not include_chats and exclude_chats:
        chats = exclude_chats
        blacklist_chats = True
    elif include_chats and exclude_chats:
        chats = set(include_chats - exclude_chats)

behaviour_config = config.get('behaviour', {})
use_test_bank = behaviour_config.get('use_test_bank', True)
test_bank_location = behaviour_config['test_bank_location'] if use_test_bank else None
try_answer_probability = behaviour_config.get('try_answer_probability', 1.0)
use_test_bank_probability = behaviour_config.get('use_test_bank_probability', 1.0)
use_candidate_answer_probability = behaviour_config.get('use_candidate_answer_probability', 1.0)

test_bank = TestBank(test_bank_location) if use_test_bank else None
state_machine = StateMachine(test_bank=test_bank,
                             try_answer_probability=try_answer_probability,
                             use_test_bank_probability=use_test_bank_probability,
                             use_candidate_answer_probability=use_candidate_answer_probability)


@client.on(events.NewMessage(chats=chats,
                             blacklist_chats=blacklist_chats,
                             incoming=True,
                             from_users=(QUIZARIUM_USER_ID,)))
async def handle_message(event):
    await state_machine.handle(event)


client.start(phone, password)
client.run_until_disconnected()
